// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: advice.proto

package advicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdviceServiceClient is the client API for AdviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdviceServiceClient interface {
	GetAdvice(ctx context.Context, in *GetUserAdviceRequest, opts ...grpc.CallOption) (*GetUserAdviceResponse, error)
	CreateUpdateAdvice(ctx context.Context, in *CreateUpdateAdviceRequest, opts ...grpc.CallOption) (*CreateUpdateAdviceResponse, error)
}

type adviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdviceServiceClient(cc grpc.ClientConnInterface) AdviceServiceClient {
	return &adviceServiceClient{cc}
}

func (c *adviceServiceClient) GetAdvice(ctx context.Context, in *GetUserAdviceRequest, opts ...grpc.CallOption) (*GetUserAdviceResponse, error) {
	out := new(GetUserAdviceResponse)
	err := c.cc.Invoke(ctx, "/advicepb.AdviceService/GetAdvice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adviceServiceClient) CreateUpdateAdvice(ctx context.Context, in *CreateUpdateAdviceRequest, opts ...grpc.CallOption) (*CreateUpdateAdviceResponse, error) {
	out := new(CreateUpdateAdviceResponse)
	err := c.cc.Invoke(ctx, "/advicepb.AdviceService/CreateUpdateAdvice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdviceServiceServer is the server API for AdviceService service.
// All implementations must embed UnimplementedAdviceServiceServer
// for forward compatibility
type AdviceServiceServer interface {
	GetAdvice(context.Context, *GetUserAdviceRequest) (*GetUserAdviceResponse, error)
	CreateUpdateAdvice(context.Context, *CreateUpdateAdviceRequest) (*CreateUpdateAdviceResponse, error)
	mustEmbedUnimplementedAdviceServiceServer()
}

// UnimplementedAdviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdviceServiceServer struct {
}

func (UnimplementedAdviceServiceServer) GetAdvice(context.Context, *GetUserAdviceRequest) (*GetUserAdviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdvice not implemented")
}
func (UnimplementedAdviceServiceServer) CreateUpdateAdvice(context.Context, *CreateUpdateAdviceRequest) (*CreateUpdateAdviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdateAdvice not implemented")
}
func (UnimplementedAdviceServiceServer) mustEmbedUnimplementedAdviceServiceServer() {}

// UnsafeAdviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdviceServiceServer will
// result in compilation errors.
type UnsafeAdviceServiceServer interface {
	mustEmbedUnimplementedAdviceServiceServer()
}

func RegisterAdviceServiceServer(s grpc.ServiceRegistrar, srv AdviceServiceServer) {
	s.RegisterService(&AdviceService_ServiceDesc, srv)
}

func _AdviceService_GetAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAdviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdviceServiceServer).GetAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/advicepb.AdviceService/GetAdvice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdviceServiceServer).GetAdvice(ctx, req.(*GetUserAdviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdviceService_CreateUpdateAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpdateAdviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdviceServiceServer).CreateUpdateAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/advicepb.AdviceService/CreateUpdateAdvice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdviceServiceServer).CreateUpdateAdvice(ctx, req.(*CreateUpdateAdviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdviceService_ServiceDesc is the grpc.ServiceDesc for AdviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "advicepb.AdviceService",
	HandlerType: (*AdviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdvice",
			Handler:    _AdviceService_GetAdvice_Handler,
		},
		{
			MethodName: "CreateUpdateAdvice",
			Handler:    _AdviceService_CreateUpdateAdvice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "advice.proto",
}
